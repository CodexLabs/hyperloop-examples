/**
 * Hyperloop Metabase Generator
 * Copyright (c) 2015 by Appcelerator, Inc.
 */
var fs = require('fs'),
	path = require('path'),
	async = require('async'),
	genclass = require('./class'),
	genmodule = require('./module'),
	genstruct = require('./struct'),
	genblock = require('./block');

function makeModule (modules, e) {
	if (e.framework) {
		if (!(e.framework in modules)) {
			modules[e.framework] = {
				name: e.framework,
				framework: e.framework,
				filename: e.filename,
				functions: [],
				variables: [],
				static_variables: {},
				blocks: [],
				frameworks: {}
			};
		}
		return modules[e.framework];
	}
}

function merge (src, dest) {
	if (src) {
		dest =  dest || {};
		for (var k in src) {
			if (!(k in dest)) {
				dest[k] = src[k];
			}
		}
	}
}

function superClassImplementsProxy (json, cls, proto) {
	var prev;
	while (cls && cls.superclass) {
		prev = cls;
		cls = cls.superclass;
		if (cls) {
			cls = json.classes[cls];
		}
	}
	return (prev && prev.protocols && prev.protocols.indexOf(proto) !== -1);
}

function generateBuiltins (json, callback) {
	var dir = path.join(__dirname, '..', '..', 'templates', 'builtins');
	fs.readdir(dir, function (err, files) {
		if (err) { return callback(err); }
		async.eachSeries(files, function (fn, cb) {
			var gen = require(path.join(dir, fn));
			gen(json, cb);
		}, callback);
	});
}

function generateFromJSON (dir, json, callback) {
	if (!json) { return callback(new Error('json cannot be null')); }

	generateBuiltins(json, function (err) {
		if (err) { return callback(err); }

		// attach these base methods to NSObject
		['stringValue','boolValue','intValue','charValue','floatValue','shortValue',
		'longValue','longLongValue','unsignedIntValue','unsignedCharValue',
		'unsignedShortValue','unsignedLongLongValue',
		'unsignedLongValue','isNull', 'protect', 'unprotect'].forEach(function(t) {
			json.classes.NSObject.methods[t] = {
				instance: true,
				name: t,
				arguments: [],
				selector: t,
				returns: {
					encoding: '@',
					value: 'id',
					type: 'id'
				},
				impl: function () {
					return 'return Hyperloop.' + t + '(this.$native);';
				}
			};
		});

		['extend', 'addMethod'].forEach(function (k) {
			json.classes.NSObject.methods[k] = {
				instance: true,
				name: k,
				arguments: [],
				selector: k,
				impl: function () {
					return 'return Hyperloop.' + k + '(this.$native, arguments[0]);';
				}
			};
		});

		// remove these functions for now until we can fix them
		['NSLogv', 'NSLog', 'UIApplicationMain'].forEach(function (fn) {
			delete json.functions[fn];
		});

		// we must have a root object even those this is a protocol and
		// handled special in objective-c
		json.classes.NSObject.framework = 'Foundation';

		// classes
		Object.keys(json.classes).forEach(function (k) {
			var cls = json.classes[k];
			if (cls.filename === '/usr/include/objc/NSObject.h') {
				cls.framework = 'Foundation';
			}
			// add protocols
			if (cls.protocols && cls.protocols.length) {
				cls.protocols.forEach(function (p) {
					if (superClassImplementsProxy(json, cls, p)) {
						return;
					}
					var protocol = json.protocols[p];
					if (protocol) {
						merge(protocol.properties, cls.properties);
						merge(protocol.methods, cls.methods);
					}
				});
			}
			// TODO: add categories
			genclass.generate(dir, json, cls);
		});

		// structs
		Object.keys(json.structs).forEach(function (k) {
			var struct = json.structs[k];
			if (/^_+/.test(k)) {
				// if we have leading underscores for struct names, trim them
				struct.name = struct.name.replace(/^(_)+/g,'').trim();
			}
			genstruct.generate(dir, json, struct);
		});

		// modules
		var modules = {};
		// define module based functions
		Object.keys(json.functions).forEach(function (k) {
			var func = json.functions[k];
			var mod = makeModule(modules, func);
			mod && mod.functions.push(func);
		});
		// define module based constant variables
		Object.keys(json.vars).forEach(function (k) {
			var varobj = json.vars[k];
			var mod = makeModule(modules, varobj);
			mod && mod.variables.push(varobj);
		});
		// define module based enums
		Object.keys(json.enums).forEach(function (k) {
			var enumobj = json.enums[k];
			var mod = makeModule(modules, enumobj);
			if (mod && enumobj.values) {
				Object.keys(enumobj.values).forEach(function (n) {
					mod.static_variables[n] =  enumobj.values[n];
				});
			}
		});
		// define blocks
		Object.keys(json.blocks).forEach(function (k) {
			var blocks = json.blocks[k];
			var mod = makeModule(modules, {framework:k, filename:''});
			mod && blocks.forEach(function (block) {
				block && mod.blocks.push(genblock.generateBlockWrapper(mod, json, block));
			});
		});

		// generate the modules
		Object.keys(modules).forEach(function (k) {
			genmodule.generate(dir, json, modules[k]);
		});

		callback();
	});
}

/**
 * generate
 */
function generate (dir, fn, callback) {
	fs.readFile(fn, function (err, buf) {
		if (err) { return callback(err); }
		// turn it into JSON
		return generateFromJSON(dir, JSON.parse(buf), callback);
	});
}

exports.generate = generate;
exports.generateFromJSON = generateFromJSON;
